name: Mac Push Build With Existing

on: [push]

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Read Config File
        id: read_config
        run: |
          while IFS=: read -r key value; do
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)
            echo "$key=$value" >> $GITHUB_ENV
          done < mainConfig.txt
        shell: bash

      - name: Get SkedaiSatRunner using version number
        id: download-skedaisatrunner
        run: |
          skedaisatrunner_version=${{ env.skedaisatrunner_version }}
          skedaisatrunner_version_lower=$(echo "$skedaisatrunner_version" | tr '[:upper:]' '[:lower:]')
          if [ "$skedaisatrunner_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/releases/latest")
          else
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/releases/tags/$skedaisatrunner_version")
          fi
          http_status=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | sed '$d')
          echo "GitHub API response: $json_response"
          echo "HTTP Status: $http_status"
          
          if [ "$http_status" != "200" ]; then
            echo "Release not found, looking for artifact"
            artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")
            artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
            artifacts_json=$(echo "$artifacts_response" | sed '$d')
            echo "Artifacts HTTP Status: $artifacts_http_status"
            echo "Artifacts response: $artifacts_json"
            
            if [ "$artifacts_http_status" == "200" ]; then
              matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$skedaisatrunner_version" '.artifacts[] | select(.name | endswith($version) or endswith("_" + $version))')
              
              echo "Matching Artifacts: $matchingArtifacts"
              artifactCount=$(echo "$matchingArtifacts" | jq -s '. | length')
              if [ "$artifactCount" -eq 0 ]; then
                echo "No matching artifact found for version $skedaisatrunner_version"
                exit 1
              elif [ "$artifactCount" -gt 1 ]; then
                echo "Multiple matching artifacts found. Using the first one."
              fi
              artifactId=$(echo "$matchingArtifacts" | jq -s '.[0].id')
              download_url="https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts/$artifactId/zip"
            else
              echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
              exit 1
            fi
          else
            download_url=$(echo "$json_response" | jq -r '.assets[] | select(.name | endswith("_mac.zip") or endswith("mac_$skedaisatrunner_version.zip")).browser_download_url')
            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")
              artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
              artifacts_json=$(echo "$artifacts_response" | sed '$d')
              echo "Artifacts HTTP Status: $artifacts_http_status"
              echo "Artifacts response: $artifacts_json"
              
              if [ "$artifacts_http_status" == "200" ]; then
                matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$skedaisatrunner_version" '.artifacts[] | select(.name | endswith($version) or endswith("_" + $version))')
                
                echo "Matching Artifacts: $matchingArtifacts"
                artifactCount=$(echo "$matchingArtifacts" | jq -s '. | length')
                if [ "$artifactCount" -eq 0 ]; then
                  echo "No matching artifact found for version $skedaisatrunner_version"
                  exit 1
                elif [ "$artifactCount" -gt 1 ]; then
                  echo "Multiple matching artifacts found. Using the first one."
                fi
                artifactId=$(echo "$matchingArtifacts" | jq -s '.[0].id')
                download_url="https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts/$artifactId/zip"
              else
                echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
                exit 1
              fi
            fi
          fi
          echo "Download URL: $download_url"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir
        shell: bash

      - name: Get Authenticator using version number
        id: download-authenticator
        run: |
          authenticator_version=${{ env.authenticator_version }}
          authenticator_version_lower=$(echo "$authenticator_version" | tr '[:upper:]' '[:lower:]')

          if [ "$authenticator_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/releases/latest")
          else
            response=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/releases/tags/$authenticator_version")
          fi

          echo "GitHub API response: $response"

          if echo "$response" | jq -e '.message == "Not Found"' > /dev/null; then
            echo "Release not found, looking for artifact"
            artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts")
            echo "Artifacts response: $artifacts"
            matchingArtifacts=$(echo "$artifacts" | jq -r --arg version "_mac$authenticator_version" '[.artifacts[] | select(.name | endswith($version) or .name | endswith("_" + $version))]')
            
            echo "Matching Artifacts: $matchingArtifacts"

            artifactCount=$(echo "$matchingArtifacts" | jq 'length')
            if [ "$artifactCount" -eq 0 ]; then
              echo "No matching artifact found for version $authenticator_version"
              exit 1
            elif [ "$artifactCount" -gt 1 ]; then
              echo "Multiple matching artifacts found. Using the first one."
            fi

            artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')
            download_url="https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts/$artifactId/zip"
          else
            download_url=$(echo "$response" | jq -r '.assets[] | select(.name | endswith("_mac.zip") or .name | endswith("mac_$authenticator_version.zip")).browser_download_url')

            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts")
              echo "Artifacts response: $artifacts"
              matchingArtifacts=$(echo "$artifacts" | jq -r --arg version "_mac$authenticator_version" '[.artifacts[] | select(.name | endswith($version) or .name | endswith("_" + $version))]')
              
              echo "Matching Artifacts: $matchingArtifacts"

              artifactCount=$(echo "$matchingArtifacts" | jq 'length')
              if [ "$artifactCount" -eq 0 ]; then
                echo "No matching artifact found for version $authenticator_version"
                exit 1
              elif [ "$artifactCount" -gt 1 ]; then
                echo "Multiple matching artifacts found. Using the first one."
              fi

              artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')
              download_url="https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts/$artifactId/zip"
            fi
          fi

          echo "Download URL: $download_url"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir
        shell: bash

      - name: Get UserServer using version number
        id: download-userserver
        run: |
          userserver_version=${{ env.userserver_version }}
          userserver_version_lower=$(echo "$userserver_version" | tr '[:upper:]' '[:lower:]')

          if [ "$userserver_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/releases/latest")
          else
            response=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/releases/tags/$userserver_version")
          fi

          echo "GitHub API response: $response"

          if echo "$response" | jq -e '.message == "Not Found"' > /dev/null; then
            echo "Release not found, looking for artifact"
            artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts")
            echo "Artifacts response: $artifacts"
            matchingArtifacts=$(echo "$artifacts" | jq -r --arg version "_mac$userserver_version" '[.artifacts[] | select(.name | endswith($version) or .name | endswith("_" + $version))]')
            
            echo "Matching Artifacts: $matchingArtifacts"

            artifactCount=$(echo "$matchingArtifacts" | jq 'length')
            if [ "$artifactCount" -eq 0 ]; then
              echo "No matching artifact found for version $userserver_version"
              exit 1
            elif [ "$artifactCount" -gt 1 ]; then
              echo "Multiple matching artifacts found. Using the first one."
            fi

            artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')
            download_url="https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts/$artifactId/zip"
          else
            download_url=$(echo "$response" | jq -r '.assets[] | select(.name | endswith("_mac.zip") or .name | endswith("mac_$userserver_version.zip")).browser_download_url')

            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts")
              echo "Artifacts response: $artifacts"
              matchingArtifacts=$(echo "$artifacts" | jq -r --arg version "_mac$userserver_version" '[.artifacts[] | select(.name | endswith($version) or .name | endswith("_" + $version))]')
              
              echo "Matching Artifacts: $matchingArtifacts"

              artifactCount=$(echo "$matchingArtifacts" | jq 'length')
              if [ "$artifactCount" -eq 0 ]; then
                echo "No matching artifact found for version $userserver_version"
                exit 1
              elif [ "$artifactCount" -gt 1 ]; then
                echo "Multiple matching artifacts found. Using the first one."
              fi

              artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')
              download_url="https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts/$artifactId/zip"
            fi
          fi

          echo "Download URL: $download_url"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir

          exePattern="userServer_mac"
          exeFile=$(find $artifactDir -name "$exePattern" | head -n 1)
          if [ -n "$exeFile" ]; then
            mv "$exeFile" "$artifactDir/userServer_mac"
          else
            echo "No executable file matching the pattern '$exePattern' found in the extracted artifacts."
            exit 1
          fi
        shell: bash


      - name: Move executables to packaging directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/bin
          mv components/userServer_mac $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/skedaisatrunner $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/authenticator $GITHUB_WORKSPACE/pkgroot/usr/local/bin/

      - name: Create plist file for service
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents
          plistContent='<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n  <dict>\n    <key>Label</key>\n    <string>com.aitkn.skedaiuserserver</string>\n    <key>ProgramArguments</key>\n    <array>\n      <string>/usr/local/bin/userServer_mac</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>StandardErrorPath</key>\n    <string>/usr/local/var/log/userserver.err</string>\n    <key>StandardOutPath</key>\n    <string>/usr/local/var/log/userserver.out</string>\n  </dict>\n</plist>'
          echo -e "$plistContent" > $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents/com.aitkn.skedaiuserserver.plist

      - name: Create log directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/var/log

      - name: Build the installer package
        run: |
          pkgbuild --root $GITHUB_WORKSPACE/pkgroot \
                   --identifier com.aitkn.skedaiuserserver \
                   --version ${{ env.build_version }} \
                   --install-location / \
                   userServerInstaller.pkg

      - name: Upload installer package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: userServerInstaller_mac${{ env.build_version }}
          path: userServerInstaller.pkg
