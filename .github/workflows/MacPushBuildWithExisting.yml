name: Mac Push Build With Existing

on: [push]

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Read Config File
        id: read_config
        run: |
          while IFS=: read -r key value; do
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)
            echo "$key=$value" >> $GITHUB_ENV
          done < mainConfig.txt
        shell: bash

      - name: Get SkedaiSatRunner using version number
        id: download-skedaisatrunner
        run: |
          skedaisatrunner_version=${{ env.skedaisatrunner_version }}
          skedaisatrunner_version_lower=$(echo "$skedaisatrunner_version" | tr '[:upper:]' '[:lower:]')

          if [ "$skedaisatrunner_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/releases/latest")
          else
            echo "Fetching release for version $skedaisatrunner_version..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/releases/tags/$skedaisatrunner_version")
          fi

          http_status=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | sed '$d')
          echo "HTTP Status: $http_status"

          if [ "$http_status" != "200" ]; then
            echo "Release not found, looking for artifact"
            artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")
            artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
            artifacts_json=$(echo "$artifacts_response" | sed '$d')
            echo "Artifacts HTTP Status: $artifacts_http_status"

            if [ "$artifacts_http_status" == "200" ]; then
              matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$skedaisatrunner_version" --arg version2 "_mac_$skedaisatrunner_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
              if [ -z "$matchingArtifacts" ]; then
                echo "No matching artifact found for version $skedaisatrunner_version"
                exit 1
              fi
              download_url="https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts/$matchingArtifacts/zip"
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
              artifactDir="components"
              mkdir -p $artifactDir
              unzip -q artifact.zip -d $artifactDir

              exePattern1="skedaiSatRunner_mac"
              exePattern2="SkedaiSatRunner"
              exeFile=$(find $artifactDir -name "$exePattern1" -o -name "$exePattern2" | head -n 1)
              if [ -n "$exeFile" ]; then
                if [[ "$exeFile" != *"_mac" ]]; then
                  mv "$exeFile" "${exeFile}_mac"
                  exeFile="${exeFile}_mac"
                fi
                mv "$exeFile" "$artifactDir/skedaiSatRunner_mac"
              else
                echo "No executable file matching the pattern '$exePattern1' or '$exePattern2' found in the extracted artifacts."
                echo "Files found in artifact directory:"
                find $artifactDir -type f
                exit 1
              fi
            else
              echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
              exit 1
            fi
          else
            echo "Release found. Checking assets..."
            download_url=$(echo "$json_response" | jq -r --arg version "mac_$skedaisatrunner_version" '.assets[] | select(.name | endswith($version)).browser_download_url')
            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")
              artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
              artifacts_json=$(echo "$artifacts_response" | sed '$d')
              echo "Artifacts HTTP Status: $artifacts_http_status"

              if [ "$artifacts_http_status" == "200" ]; then
                matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$skedaisatrunner_version" --arg version2 "_mac_$skedaisatrunner_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
                if [ -z "$matchingArtifacts" ]; then
                  echo "No matching artifact found for version $skedaisatrunner_version"
                  exit 1
                fi
                download_url="https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts/$matchingArtifacts/zip"
                echo "Download URL: $download_url"
                curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
                artifactDir="components"
                mkdir -p $artifactDir
                unzip -q artifact.zip -d $artifactDir

                exePattern1="skedaiSatRunner_mac"
                exePattern2="SkedaiSatRunner"
                exeFile=$(find $artifactDir -name "$exePattern1" -o -name "$exePattern2" | head -n 1)
                if [ -n "$exeFile" ]; then
                  if [[ "$exeFile" != *"_mac" ]]; then
                    mv "$exeFile" "${exeFile}_mac"
                    exeFile="${exeFile}_mac"
                  fi
                  mv "$exeFile" "$artifactDir/skedaiSatRunner_mac"
                else
                  echo "No executable file matching the pattern '$exePattern1' or '$exePattern2' found in the extracted artifacts."
                  echo "Files found in artifact directory:"
                  find $artifactDir -type f
                  exit 1
                fi
              else
                echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
                exit 1
              fi
            else
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o components/skedaiSatRunner_mac "$download_url"
            fi
          fi
        shell: bash

      - name: Get Authenticator using version number
        id: download-authenticator
        run: |
          authenticator_version=${{ env.authenticator_version }}
          authenticator_version_lower=$(echo "$authenticator_version" | tr '[:upper:]' '[:lower:]')
      
          if [ "$authenticator_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/releases/latest")
          else
            echo "Fetching release for version $authenticator_version..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/releases/tags/$authenticator_version")
          fi
      
          http_status=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | sed '$d')
          echo "HTTP Status: $http_status"
      
          if [ "$http_status" != "200" ]; then
            echo "Release not found, looking for artifact"
            artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts")
            artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
            artifacts_json=$(echo "$artifacts_response" | sed '$d')
            echo "Artifacts HTTP Status: $artifacts_http_status"
      
            if [ "$artifacts_http_status" == "200" ]; then
              matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$authenticator_version" --arg version2 "_mac_$authenticator_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
              if [ -z "$matchingArtifacts" ]; then
                echo "No matching artifact found for version $authenticator_version"
                exit 1
              fi
              download_url="https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts/$matchingArtifacts/zip"
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
              artifactDir="components"
              mkdir -p $artifactDir
              unzip -q artifact.zip -d $artifactDir
      
              dmgFile=$(find $artifactDir -name "*.dmg" | head -n 1)
      
              if [ -n "$dmgFile" ]; then
                echo "Found DMG file: $dmgFile"
                hdiutil attach "$dmgFile" -mountpoint /Volumes/AuthApp
                cp -R /Volumes/AuthApp/*.app "$artifactDir/authenticator_mac.app"
                hdiutil detach /Volumes/AuthApp
      
                # Verify that the .app was copied
                echo "Contents of $artifactDir after copying .app from DMG:"
                ls -la $artifactDir
      
                if [ -d "$artifactDir/authenticator_mac.app" ]; then
                  echo "Successfully copied authenticator_mac.app"
                else
                  echo "Error: Failed to copy authenticator_mac.app"
                  exit 1
                fi
      
              else
                echo "No DMG file found. Looking for executable."
                exeFile=$(find $artifactDir -name "authenticator_mac" -o -name "authenticator" | head -n 1)
                if [ -n "$exeFile" ]; then
                  if [[ "$exeFile" != *"_mac" ]]; then
                    mv "$exeFile" "${exeFile}_mac"
                    exeFile="${exeFile}_mac"
                  fi
                  mv "$exeFile" "$artifactDir/authenticator_mac"
                else
                  echo "No executable file matching the pattern found in the extracted artifacts."
                  echo "Files found in artifact directory:"
                  find $artifactDir -type f
                  exit 1
                fi
              fi
            else
              echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
              exit 1
            fi
          else
            echo "Release found. Checking assets..."
            download_url=$(echo "$json_response" | jq -r --arg version "mac_$authenticator_version" '.assets[] | select(.name | endswith($version)).browser_download_url')
            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts")
              artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
              artifacts_json=$(echo "$artifacts_response" | sed '$d')
              echo "Artifacts HTTP Status: $artifacts_http_status"
      
              if [ "$artifacts_http_status" == "200" ]; then
                matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$authenticator_version" --arg version2 "_mac_$authenticator_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
                if [ -z "$matchingArtifacts" ]; then
                  echo "No matching artifact found for version $authenticator_version"
                  exit 1
                fi
                download_url="https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts/$matchingArtifacts/zip"
                echo "Download URL: $download_url"
                curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
                artifactDir="components"
                mkdir -p $artifactDir
                unzip -q artifact.zip -d $artifactDir
      
                dmgFile=$(find $artifactDir -name "*.dmg" | head -n 1)
      
                if [ -n "$dmgFile" ]; then
                  echo "Found DMG file: $dmgFile"
                  hdiutil attach "$dmgFile" -mountpoint /Volumes/AuthApp
                  cp -R /Volumes/AuthApp/*.app "$artifactDir/authenticator_mac.app"
                  hdiutil detach /Volumes/AuthApp
      
                  # Verify that the .app was copied
                  echo "Contents of $artifactDir after copying .app from DMG:"
                  ls -la $artifactDir
      
                  if [ -d "$artifactDir/authenticator_mac.app" ]; then
                    echo "Successfully copied authenticator_mac.app"
                  else
                    echo "Error: Failed to copy authenticator_mac.app"
                    exit 1
                  fi
      
                else
                  echo "No DMG file found. Looking for executable."
                  exeFile=$(find $artifactDir -name "authenticator_mac" -o -name "authenticator" | head -n 1)
                  if [ -n "$exeFile" ]; then
                    if [[ "$exeFile" != *"_mac" ]]; then
                      mv "$exeFile" "${exeFile}_mac"
                      exeFile="${exeFile}_mac"
                    fi
                    mv "$exeFile" "$artifactDir/authenticator_mac"
                  else
                    echo "No executable file matching the pattern found in the extracted artifacts."
                    echo "Files found in artifact directory:"
                    find $artifactDir -type f
                    exit 1
                  fi
                fi
              else
                echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
                exit 1
              fi
            else
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o components/authenticator_mac "$download_url"
            fi
          fi
        shell: bash
  
      - name: Get UserServer using version number
        id: download-userserver
        run: |
          userserver_version=${{ env.userserver_version }}
          userserver_version_lower=$(echo "$userserver_version" | tr '[:upper:]' '[:lower:]')

          if [ "$userserver_version_lower" == "latest" ]; then
            echo "Fetching the latest release..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/releases/latest")
          else
            echo "Fetching release for version $userserver_version..."
            response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/releases/tags/$userserver_version")
          fi

          http_status=$(echo "$response" | tail -n1)
          json_response=$(echo "$response" | sed '$d')
          echo "HTTP Status: $http_status"

          if [ "$http_status" != "200" ]; then
            echo "Release not found, looking for artifact"
            artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts")
            artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
            artifacts_json=$(echo "$artifacts_response" | sed '$d')
            echo "Artifacts HTTP Status: $artifacts_http_status"

            if [ "$artifacts_http_status" == "200" ]; then
              matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$userserver_version" --arg version2 "_mac_$userserver_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
              if [ -z "$matchingArtifacts" ]; then
                echo "No matching artifact found for version $userserver_version"
                exit 1
              fi
              download_url="https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts/$matchingArtifacts/zip"
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
              artifactDir="components"
              mkdir -p $artifactDir
              unzip -q artifact.zip -d $artifactDir

              exePattern1="userServer_mac"
              exePattern2="userServer"
              exeFile=$(find $artifactDir -name "$exePattern1" -o -name "$exePattern2" | head -n 1)
              if [ -n "$exeFile" ]; then
                if [[ "$exeFile" != *"_mac" ]]; then
                  mv "$exeFile" "${exeFile}_mac"
                  exeFile="${exeFile}_mac"
                fi
                mv "$exeFile" "$artifactDir/userServer_mac"
              else
                echo "No executable file matching the pattern '$exePattern1' or '$exePattern2' found in the extracted artifacts."
                echo "Files found in artifact directory:"
                find $artifactDir -type f
                exit 1
              fi
            else
              echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
              exit 1
            fi
          else
            echo "Release found. Checking assets..."
            download_url=$(echo "$json_response" | jq -r --arg version "mac_$userserver_version" '.assets[] | select(.name | endswith($version)).browser_download_url')
            if [ -z "$download_url" ]; then
              echo "No macOS asset found in the release. Looking for artifact instead."
              artifacts_response=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts")
              artifacts_http_status=$(echo "$artifacts_response" | tail -n1)
              artifacts_json=$(echo "$artifacts_response" | sed '$d')
              echo "Artifacts HTTP Status: $artifacts_http_status"

              if [ "$artifacts_http_status" == "200" ]; then
                matchingArtifacts=$(echo "$artifacts_json" | jq -r --arg version "_mac$userserver_version" --arg version2 "_mac_$userserver_version" '.artifacts[] | select(.name | endswith($version) or endswith($version2)) | .id' | head -n 1)
                if [ -z "$matchingArtifacts" ]; then
                  echo "No matching artifact found for version $userserver_version"
                  exit 1
                fi
                download_url="https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts/$matchingArtifacts/zip"
                echo "Download URL: $download_url"
                curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
                artifactDir="components"
                mkdir -p $artifactDir
                unzip -q artifact.zip -d $artifactDir

                exePattern1="userServer_mac"
                exePattern2="userServer"
                exeFile=$(find $artifactDir -name "$exePattern1" -o -name "$exePattern2" | head -n 1)
                if [ -n "$exeFile" ]; then
                  if [[ "$exeFile" != *"_mac" ]]; then
                    mv "$exeFile" "${exeFile}_mac"
                    exeFile="${exeFile}_mac"
                  fi
                  mv "$exeFile" "$artifactDir/userServer_mac"
                else
                  echo "No executable file matching the pattern '$exePattern1' or '$exePattern2' found in the extracted artifacts."
                  echo "Files found in artifact directory:"
                  find $artifactDir -type f
                  exit 1
                fi
              else
                echo "Failed to fetch artifacts. HTTP Status: $artifacts_http_status"
                exit 1
              fi
            else
              echo "Download URL: $download_url"
              curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o components/userServer_mac "$download_url"
            fi
          fi
        shell: bash


      - name: Move executables to packaging directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/bin
          mv components/userServer_mac $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/skedaiSatRunner_mac $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/authenticator_mac.app $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
      
      - name: Set executable permissions
        run: |
          chmod +x $GITHUB_WORKSPACE/pkgroot/usr/local/bin/userServer_mac
          chmod +x $GITHUB_WORKSPACE/pkgroot/usr/local/bin/skedaiSatRunner_mac
          # Check if .app directory exists before applying permissions
          if [ -d "$GITHUB_WORKSPACE/pkgroot/usr/local/bin/authenticator_mac.app" ]; then
            chmod +x $GITHUB_WORKSPACE/pkgroot/usr/local/bin/authenticator_mac.app/Contents/MacOS/*
          else
            echo "Error: authenticator_mac.app not found in the expected location."
            exit 1
          fi

      - name: Create plist file for service
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents
          plistContent='<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n  <dict>\n    <key>Label</key>\n    <string>com.aitkn.skedaiuserserver</string>\n    <key>ProgramArguments</key>\n    <array>\n      <string>/usr/local/bin/authenticator_mac.app/Contents/MacOS/authenticator</string>\n      <string>/usr/local/bin/userServer_mac</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>StandardErrorPath</key>\n    <string>/usr/local/var/log/userserver.err</string>\n    <key>StandardOutPath</key>\n    <string>/usr/local/var/log/userserver.out</string>\n  </dict>\n</plist>'
          echo -e "$plistContent" > $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents/com.aitkn.skedaiuserserver.plist

      - name: Create log directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/var/log

      - name: Include preinstall script
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/Library/Scripts
          cp preinstall.sh $GITHUB_WORKSPACE/pkgroot/Library/Scripts/preinstall
          chmod +x $GITHUB_WORKSPACE/pkgroot/Library/Scripts/preinstall

      - name: Build the installer package
        run: |
          pkgbuild --root $GITHUB_WORKSPACE/pkgroot \
                  --identifier com.aitkn.skedaiuserserver \
                  --version ${{ env.build_version }} \
                  --install-location / \
                  userServerInstaller.pkg

      - name: Test the installer
        run: |
          sudo installer -pkg userServerInstaller.pkg -target /
          ls /usr/local/bin
          /usr/local/bin/userServer_mac --version &
          sleep 5
          pkill -f userServer_mac
        shell: bash

      - name: Upload installer package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: userServerInstaller_mac${{ env.build_version }}
          path: userServerInstaller.pkg
