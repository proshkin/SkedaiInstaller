name: Mac Nightly Build Attempt

on:
  schedule:
    - cron: '0 5 * * *' # 5:00 AM UTC, 10:00 PM PST

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      - name: Get version number from latest ModSatRunner
        id: fetch-version
        run: |
          artifacts=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")
          latestArtifact=$(echo "$artifacts" | jq -r '.artifacts[0]')
          artifactName=$(echo "$latestArtifact" | jq -r '.name')
          version=$(echo "$artifactName" | grep -oE '\d+\.\d+\.\d+$')
          echo "VERSION=$version" >> $GITHUB_ENV
        shell: bash


      - name: Get latest ModSatRunner using version number
        id: download-modsatrunner
        run: |
          version=${{ env.VERSION }}
          echo "Version: $version"
          
          artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts")          
          matchingArtifacts=$(echo "$artifacts" | jq -r --arg VERSION "_mac$version" '[.artifacts[] | select(.name | endswith($VERSION))]')
          
          artifactCount=$(echo "$matchingArtifacts" | jq 'length')
          
          if [ "$artifactCount" -eq 0 ]; then
            echo "No matching artifact found for version $version"
            exit 1
          elif [ "$artifactCount" -gt 1 ]; then
            echo "Multiple matching artifacts found. Using the first one."
          fi

          artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')          
          download_url="https://api.github.com/repos/proshkin/SkedaiSatRunner/actions/artifacts/$artifactId/zip"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir
        shell: bash

      - name: Get latest Authenticator using version number
        id: download-authenticator
        run: |
          version=${{ env.VERSION }}
          echo "Version: $version"
          
          artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts")          
          matchingArtifacts=$(echo "$artifacts" | jq -r --arg VERSION "_mac$version" '[.artifacts[] | select(.name | endswith($VERSION))]')
          
          artifactCount=$(echo "$matchingArtifacts" | jq 'length')
          
          if [ "$artifactCount" -eq 0 ]; then
            echo "No matching artifact found for version $version"
            exit 1
          elif [ "$artifactCount" -gt 1 ]; then
            echo "Multiple matching artifacts found. Using the first one."
          fi

          artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')          
          download_url="https://api.github.com/repos/proshkin/SkedaiAuthenticator/actions/artifacts/$artifactId/zip"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir
        shell: bash

      - name: Get latest UserServer using version number
        id: download-userserver
        run: |
          version=${{ env.VERSION }}
          echo "Version: $version"
          
          artifacts=$(curl -s -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" "https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts")          
          matchingArtifacts=$(echo "$artifacts" | jq -r --arg VERSION "_mac$version" '[.artifacts[] | select(.name | endswith($VERSION))]')
          
          artifactCount=$(echo "$matchingArtifacts" | jq 'length')
          
          if [ "$artifactCount" -eq 0 ]; then
            echo "No matching artifact found for version $version"
            exit 1
          elif [ "$artifactCount" -gt 1 ]; then
            echo "Multiple matching artifacts found. Using the first one."
          fi

          artifactId=$(echo "$matchingArtifacts" | jq -r '.[0].id')          
          download_url="https://api.github.com/repos/proshkin/SkedaiUserServer/actions/artifacts/$artifactId/zip"
          curl -L -H "Authorization: token ${{ secrets.SKEDAI_ACTION_TOKEN }}" -o artifact.zip "$download_url"
          artifactDir="components"
          mkdir -p $artifactDir
          unzip artifact.zip -d $artifactDir

          exePattern="userServer_mac"
          exeFile=$(find $artifactDir -name "$exePattern" | head -n 1)
          if [ -n "$exeFile" ]; then
            mv "$exeFile" "$artifactDir/userServer_mac"
          else
            echo "No executable file matching the pattern '$exePattern' found in the extracted artifacts."
            exit 1
          fi
        shell: bash

      - name: Move executables to packaging directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/bin
          mv components/userServer_mac $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/skedaisatrunner $GITHUB_WORKSPACE/pkgroot/usr/local/bin/
          mv components/authenticator $GITHUB_WORKSPACE/pkgroot/usr/local/bin/

      - name: Create plist file for service
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents
          plistContent='<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n  <dict>\n    <key>Label</key>\n    <string>com.aitkn.skedaiuserserver</string>\n    <key>ProgramArguments</key>\n    <array>\n      <string>/usr/local/bin/userServer_mac</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>StandardErrorPath</key>\n    <string>/usr/local/var/log/userserver.err</string>\n    <key>StandardOutPath</key>\n    <string>/usr/local/var/log/userserver.out</string>\n  </dict>\n</plist>'
          echo -e "$plistContent" > $GITHUB_WORKSPACE/pkgroot/Library/LaunchAgents/com.aitkn.skedaiuserserver.plist

      - name: Create log directory
        run: |
          mkdir -p $GITHUB_WORKSPACE/pkgroot/usr/local/var/log

      - name: Build the installer package
        run: |
          pkgbuild --root $GITHUB_WORKSPACE/pkgroot \
                   --identifier com.aitkn.skedaiuserserver \
                   --version ${{ env.VERSION }} \
                   --install-location / \
                   userServerInstaller.pkg

      - name: Upload installer package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: userServerInstaller_mac${{ env.VERSION }}
          path: userServerInstaller.pkg
